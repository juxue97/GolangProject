definitions:
  auth.loginUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  auth.registerUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.userWithToken:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/repository.User'
    type: object
  repository.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: string
      name:
        type: string
    type: object
  repository.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      password:
        $ref: '#/definitions/repository.password'
      role:
        $ref: '#/definitions/repository.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
  repository.password:
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a authentication backend server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Auth API
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Creates a token after successful login
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.loginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login user
      tags:
      - authentication
  /auth/user:
    post:
      consumes:
      - application/json
      description: Registers a user and send them an comfirmation email
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.registerUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/auth.userWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /health:
    get:
      description: To perform server health check
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Healthcheck
      tags:
      - Health Check
  /users/activate/{token}:
    put:
      description: Activates a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activates a user account status
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
